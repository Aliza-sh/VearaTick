package com.vearad.vearatick.fgmSub

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.graphics.drawable.ColorDrawable
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.Window
import android.widget.ArrayAdapter
import android.widget.AutoCompleteTextView
import android.widget.Toast
import androidx.activity.OnBackPressedCallback
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.fragment.app.Fragment
import com.wdullaer.materialdatetimepicker.time.TimePickerDialog
import com.wdullaer.materialdatetimepicker.time.Timepoint
import com.xdev.arch.persiancalendar.datepicker.*
import com.xdev.arch.persiancalendar.datepicker.calendar.PersianCalendar
import com.vearad.vearatick.DataBase.Project
import com.vearad.vearatick.DataBase.ProjectDao
import com.vearad.vearatick.ProAndEmpActivity
import com.vearad.vearatick.R
import com.vearad.vearatick.databinding.ActivityProAndEmpBinding
import com.vearad.vearatick.databinding.FragmentDialogDeadlineBinding
import com.vearad.vearatick.databinding.FragmentNewProjectBinding
import com.vearad.vearatick.projectAdapter
import java.text.DecimalFormat


class ProjectNewFragment(
    val projectDao: ProjectDao,
    val bindingActivityProAndEmp: ActivityProAndEmpBinding,
) : Fragment() {
    lateinit var binding: FragmentNewProjectBinding
    lateinit var bindingDialogView: FragmentDialogDeadlineBinding

    var valueBtnNoDate = false
    var valueBtnWatch = false
    var valueBtnCalendar = false

    var valueWatch = ""
    var valueCalendar = ""

    private var isUpdating = false

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentNewProjectBinding.inflate(layoutInflater, container, false)
        bindingDialogView = FragmentDialogDeadlineBinding.inflate(layoutInflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        onBackPressed()

        val typeProject = listOf(
            "اندروید",
            "بک اند",
            "فرانت اند",
            "رباتیک",
            "طراحی",
            "سئو"
        )

        val myAdapteredt = ArrayAdapter(requireContext(), R.layout.item_gender, typeProject)
        (binding.dialogMainEdtGdrperson.editText as AutoCompleteTextView).setAdapter(
            myAdapteredt
        )

        binding.btnBck.setOnClickListener {
            if (parentFragmentManager.backStackEntryCount > 0) {
                parentFragmentManager.popBackStack()
            }
        }

        binding.btnCalendar.setOnClickListener {
            showDeadlineDialog()
        }

        binding.radioGroup.setOnCheckedChangeListener { _, checkedId ->

            when (checkedId) {

                R.id.btn_no_settlement -> {
                    binding.budget.visibility = View.GONE
                }

                R.id.btn_settlement -> {
                    binding.budget.visibility = View.VISIBLE
                }

            }
        }

        var formattedValue = "0"
        val decimalFormat = DecimalFormat("#,###")
        binding.edtBudget.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                // قبل از تغییرات متنی
            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                // در هنگام تغییرات متنی
            }

            override fun afterTextChanged(s: Editable?) {
                // پس از تغییرات متنی
                if (isUpdating) {
                    return
                }

                isUpdating = true

                val input = s.toString().replace(",", "") // حذف ویرگول‌ها از ورودی
                val value = input.toLongOrNull()

                if (value != null) {
                    formattedValue = decimalFormat.format(value)
                    binding.edtBudget.setText(formattedValue)
                    binding.edtBudget.setSelection(formattedValue.length)
                    binding.txtBudget.text = formatCurrency(value)
                }
                isUpdating = false
            }
        })

        binding.btnDone.setOnClickListener {

            if (binding.btnSettlement.isChecked) {

                if (binding.edtBudget.length() > 0) {
                    addNewProject(formattedValue)
                } else {
                    Toast.makeText(context, "لطفا همه مقادیر را وارد کنید", Toast.LENGTH_SHORT)
                        .show()
                }
            } else {
                addNewProject(formattedValue)
            }
        }

    }

    private fun showDeadlineDialog() {

        val parent = bindingDialogView.root.parent as? ViewGroup
        parent?.removeView(bindingDialogView.root)
        val dialogBuilder = AlertDialog.Builder(bindingDialogView.root.context)
        dialogBuilder.setView(bindingDialogView.root)

        bindingDialogView.btnNoDate.setOnClickListener {
            if (!valueBtnNoDate && !valueBtnWatch && !valueBtnCalendar) {
                bindingDialogView.btnNoDate.setBackgroundResource(R.drawable.shape_background_deadline_firoze)
                valueBtnNoDate = true

            } else {
                bindingDialogView.btnNoDate.setBackgroundResource(R.drawable.shape_background_deadline_blacke)
                valueBtnNoDate = false

            }
        }

        bindingDialogView.btnWatch.setOnClickListener {
            if (!valueBtnNoDate && !valueBtnWatch) {
                onCreatePicker()
            } else {
                bindingDialogView.btnWatch.setBackgroundResource(R.drawable.shape_background_deadline_blacke)
                bindingDialogView.txtWatch.text = "ساعت"
                bindingDialogView.txtWatch.textSize = 20f
                valueBtnWatch = false
            }
        }

        bindingDialogView.btnCalendar.setOnClickListener {
            if (!valueBtnNoDate && !valueBtnCalendar) {
                onCreateCalendar()
            } else {
                bindingDialogView.txtCalendar.text = "تقویم"
                bindingDialogView.txtCalendar.textSize = 20f
                bindingDialogView.btnCalendar.setBackgroundResource(R.drawable.shape_background_deadline_blacke)
                valueBtnCalendar = false
            }
        }

        val alertDialog = dialogBuilder.create()
        alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE)
        alertDialog.window?.setBackgroundDrawable(ColorDrawable(Color.Transparent.toArgb()))
        alertDialog.setCancelable(false)
        alertDialog.show()
        bindingDialogView.dialogBtnCansel.setOnClickListener {
            alertDialog.dismiss()
        }
        bindingDialogView.dialogBtnSure.setOnClickListener {

            if (valueBtnNoDate)
                binding.txtDedlineDateTime.text = "پروژه ددلاین \n ندارد "
            if (valueBtnWatch && !valueBtnCalendar)
                binding.txtDedlineDateTime.text = valueWatch
            if (!valueBtnWatch && valueBtnCalendar)
                binding.txtDedlineDateTime.text = valueCalendar
            if (valueBtnWatch && valueBtnCalendar)
                binding.txtDedlineDateTime.text = "$valueCalendar \n$valueWatch "

            alertDialog.dismiss()
        }
    }

    fun onCreatePicker() {

        val persianCalendar = com.kizitonwose.calendarview.utils.persian.PersianCalendar()

        val timePickerDialog = TimePickerDialog.newInstance(
            TimePickerDialog.OnTimeSetListener { view, hourOfDay, minute, second ->
                valueWatch = "$hourOfDay:$minute"
                bindingDialogView.txtWatch.text = valueWatch
                bindingDialogView.txtWatch.textSize = 24f
                bindingDialogView.btnWatch.setBackgroundResource(R.drawable.shape_background_deadline_firoze)
                valueBtnWatch = true
            },

            true
        )
        timePickerDialog.isThemeDark = true
        timePickerDialog.setCancelText("بیخیال")
        timePickerDialog.setOkText("تایید")
        timePickerDialog.setTimeInterval(1, 1, 10)
        timePickerDialog.setInitialSelection(
            Timepoint(
                persianCalendar.time.hours,
                persianCalendar.time.minutes
            )
        )
        timePickerDialog.show(parentFragmentManager, "TimePickerDialog")

    }

    fun onCreateCalendar() {

        val calendar = PersianCalendar()
        calendar.setPersian(1400, Month.FARVARDIN, 1)
        val start = calendar.timeInMillis
        calendar.setPersian(1500, Month.ESFAND, 29)
        val end = calendar.timeInMillis
        val openAt = PersianCalendar.getToday().timeInMillis
        val constraints = CalendarConstraints.Builder()
            .setStart(start)
            .setEnd(end)
            .setOpenAt(openAt)
            .setValidator(DateValidatorPointForward.from(start)).build()
        val datePicker = MaterialDatePicker.Builder
            .datePicker()
            .setTitleText("تاریخ را انتخاب کنید.")
            .setTheme(R.style.AppTheme_PersianCalendar)
            .setCalendarConstraints(constraints).build()
        datePicker.show((activity as ProAndEmpActivity).supportFragmentManager, "aTag")
        datePicker.isCancelable

        datePicker.addOnPositiveButtonClickListener(
            object : MaterialPickerOnPositiveButtonClickListener<Long?> {
                @SuppressLint("SetTextI18n")
                override fun onPositiveButtonClick(selection: Long?) {
                    val date = PersianCalendar(selection!!)
                    valueCalendar = date.toString()
                    bindingDialogView.txtCalendar.text = valueCalendar
                    bindingDialogView.txtCalendar.textSize = 22f
                    bindingDialogView.btnCalendar.setBackgroundResource(R.drawable.shape_background_deadline_firoze)
                    valueBtnCalendar = true
                }
            }
        )

    }

    fun onBackPressed() {
        requireActivity().onBackPressedDispatcher.addCallback(
            viewLifecycleOwner,
            object : OnBackPressedCallback(true) {
                override fun handleOnBackPressed() {
                    parentFragmentManager.beginTransaction().detach(this@ProjectNewFragment)
                        .attach(ProjectFragment(bindingActivityProAndEmp)).commit()
                }
            })
    }

    fun onNewProject() {
        parentFragmentManager.beginTransaction().detach(this@ProjectNewFragment)
            .replace(R.id.frame_layout_sub, ProjectFragment(bindingActivityProAndEmp))
            .commit()
    }

    private fun addNewProject(formattedValue: String) {
        if (
            binding.edtNamePro.length() > 0 &&
            binding.txtDedlineDateTime.length() > 0 &&
            binding.edtTypeProject.length() > 0 &&
            binding.edtInfoPro.length() > 0
        ) {
            val txtname = binding.edtNamePro.text.toString()
            val noDeadline = valueBtnNoDate
            val txtWatch = valueWatch
            val txtDate = valueCalendar
            val txtType = binding.edtTypeProject.text.toString()
            val txtDescription = binding.edtInfoPro.text.toString()
            val txtBudget = formattedValue

            val newProject = Project(
                nameProject = txtname,
                noDeadlineProject = noDeadline,
                watchDeadlineProject =  txtWatch,
                dateDeadlineProject = txtDate,
                typeProject = txtType,
                descriptionProject = txtDescription,
                budgetProject = txtBudget,

            )
            projectAdapter.addProject(newProject)
            projectDao.insert(newProject)
            onNewProject()
        } else {
            Toast.makeText(context, "لطفا همه مقادیر را وارد کنید", Toast.LENGTH_SHORT).show()
        }
    }

    private fun formatCurrency(value: Long?): String {
        val decimalFormat = DecimalFormat("#,###")
        return decimalFormat.format(value) + " تومان"
    }
}



<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardBackgroundColor="?attr/colorPrimaryVariant"
    app:cardCornerRadius="25dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        style="@style/Theme.Material3.Light.Dialog"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layoutDirection="ltr"
        android:padding="10dp">

        <TextView
            android:id="@+id/textView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="10dp"
            android:text="ددلاین پروژه را تعیین کنید."
            android:textColor="?attr/colorOnSecondary"
            android:textSize="28sp"
            android:textStyle="bold"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <LinearLayout
            style="@style/Widget.AppCompat.CompoundButton.CheckBox"
            android:id="@+id/btn_no_date"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="32dp"
            android:background="@drawable/shape_background_deadline_blacke"
            android:gravity="center"
            android:layoutDirection="rtl"
            android:orientation="horizontal"
            app:layout_constraintEnd_toEndOf="@+id/btn_watch"
            app:layout_constraintStart_toStartOf="@+id/btn_calendar"
            app:layout_constraintTop_toBottomOf="@+id/textView">

            <ImageView
                android:layout_width="30dp"
                android:layout_height="30dp"
                android:layout_marginEnd="10dp"
                android:layout_marginStart="20dp"
                android:layout_marginBottom="15dp"
                android:layout_marginTop="15dp"
                android:src="@drawable/ic_no_deadline" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="10dp"
                android:layout_marginEnd="20dp"
                android:text="پروژه ددلاین ندارد"
                android:textColor="@color/white"
                android:textSize="20sp" />

        </LinearLayout>

        <LinearLayout
            android:id="@+id/btn_calendar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@drawable/shape_background_deadline_blacke"
            android:gravity="center"
            android:layoutDirection="rtl"
            android:orientation="horizontal"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toEndOf="@+id/btn_watch"
            app:layout_constraintTop_toTopOf="@+id/btn_watch">

            <ImageView
                app:tint="@color/white"
                android:layout_width="30dp"
                android:layout_height="30dp"
                android:layout_marginEnd="10dp"
                android:layout_marginStart="20dp"
                android:layout_marginBottom="15dp"
                android:layout_marginTop="15dp"
                android:src="@drawable/ic_calendar" />

            <TextView
                android:id="@+id/txt_calendar"
                android:letterSpacing="0.04"
                android:textAlignment="center"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="10dp"
                android:layout_marginEnd="30dp"
                android:text="تقویم"
                android:textColor="@color/white"
                android:textSize="20sp" />

        </LinearLayout>

        <LinearLayout
            android:id="@+id/btn_watch"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:layout_marginEnd="8dp"
            android:background="@drawable/shape_background_deadline_blacke"
            android:gravity="center"
            android:layoutDirection="rtl"
            android:orientation="horizontal"
            app:layout_constraintEnd_toStartOf="@+id/btn_calendar"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/btn_no_date">

            <ImageView
                android:layout_width="30dp"
                android:layout_height="30dp"
                android:layout_marginStart="20dp"
                android:layout_marginTop="15dp"
                android:layout_marginEnd="10dp"
                android:layout_marginBottom="15dp"
                android:src="@drawable/ic_time_deadline" />

            <TextView
                android:id="@+id/txt_watch"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="10dp"
                android:layout_marginEnd="30dp"
                android:letterSpacing="0.02"
                android:text="ساعت"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />

        </LinearLayout>

        <com.google.android.material.button.MaterialButton
            android:id="@+id/dialog_btn_Sure"
            android:layout_width="80dp"
            android:layout_height="40dp"
            android:layout_marginStart="8dp"
            android:layout_marginTop="32dp"
            android:background="@drawable/shape_dore_button"
            app:backgroundTint="@color/firoze"
            android:text="تایید"
            android:textColor="@color/white"
            android:textSize="16sp"
            android:textStyle="bold"
            app:layout_constraintStart_toEndOf="@+id/dialog_btn_Cansel"
            app:layout_constraintTop_toBottomOf="@+id/btn_watch" />

        <TextView
            android:id="@+id/dialog_btn_Cansel"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp"
            android:backgroundTint="?attr/colorPrimaryVariant"
            android:paddingStart="20dp"
            android:paddingTop="5dp"
            android:paddingEnd="20dp"
            android:paddingBottom="5dp"
            android:text=" بیخیال"
            android:textColor="@color/firoze"
            android:textSize="20sp"
            android:textStyle="bold"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="@+id/dialog_btn_Sure" />

    </androidx.constraintlayout.widget.ConstraintLayout>

</androidx.cardview.widget.CardView>


    private fun setdata(project: Project) {

        binding.edtNamePro.setText(project.nameProject)

        if (project.budgetProject !="0"){
            formattedValue = project.budgetProject!!
            binding.btnSettlement.isChecked = true
            binding.budget.visibility = View.VISIBLE
            binding.edtBudget.setText(project.budgetProject)
            binding.txtBudget.text = project.budgetProject + " تومان"
        }else
            binding.btnNoSettlement.isChecked = true

        if (project.noDeadlineProject!!) {
            valueBtnNoDate = project.noDeadlineProject
            binding.txtDedlineDateTime.setText("پروژه ددلاین \nندارد")
        } else {
            valueWatch = project.watchDeadlineProject!!
            valueCalendar = project.dateDeadlineProject!!
            binding.txtDedlineDateTime.setText("${project.dateDeadlineProject} \n${project.watchDeadlineProject}")

        }

        binding.edtTypeProject.setText(project.typeProject)
        binding.edtDescriptionPro.setText(project.descriptionProject)

    }























        <androidx.constraintlayout.widget.ConstraintLayout
            android:id="@+id/linearLayout5"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginStart="12dp"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="12dp"
            android:layout_marginBottom="16dp"
            android:background="@drawable/shape_background_rcv"
            android:backgroundTint="?attr/colorOnPrimary"
            android:gravity="end"
            android:orientation="vertical"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/linearLayout8">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:id="@+id/btn_payment"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                app:layout_constraintEnd_toStartOf="@+id/btn_receipt"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toStartOf="parent">

                <ImageView
                    android:id="@+id/img_project"
                    android:layout_width="30dp"
                    android:layout_height="30dp"
                    android:layout_gravity="start"
                    android:layout_marginEnd="16dp"
                    android:layout_marginBottom="8dp"
                    android:background="?attr/colorOnPrimary"
                    android:src="@drawable/img_payment"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/txt_payment"
                    app:tint="@color/white" />

                <TextView
                    android:id="@+id/textView81"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:layout_marginEnd="12dp"
                    android:text="برداشتی"
                    android:textColor="?attr/colorOnSecondary"
                    android:textSize="14sp"
                    android:textStyle="bold"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

                <TextView
                    android:id="@+id/txt_payment"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="12dp"
                    android:layout_marginTop="8dp"
                    android:text="0 تومان"
                    android:textColor="?attr/colorPrimary"
                    android:textSize="15sp"
                    android:textStyle="bold"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/textView81" />
            </androidx.constraintlayout.widget.ConstraintLayout>

            <View
                android:id="@+id/view9"
                android:layout_width="1dp"
                android:layout_height="0dp"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="16dp"
                android:background="@color/gray"
                app:layout_constraintBottom_toBottomOf="@+id/btn_receipt"
                app:layout_constraintEnd_toEndOf="@+id/btn_payment"
                app:layout_constraintStart_toEndOf="@+id/btn_payment"
                app:layout_constraintTop_toTopOf="@+id/btn_receipt" />

            <androidx.constraintlayout.widget.ConstraintLayout
                android:id="@+id/btn_receipt"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                app:layout_constraintEnd_toStartOf="@+id/btn_investment"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toEndOf="@+id/btn_payment"
                app:layout_constraintTop_toTopOf="@+id/btn_payment">

                <ImageView
                    android:id="@+id/imageButton42"
                    android:layout_width="30dp"
                    android:layout_height="30dp"
                    android:layout_gravity="start"
                    android:layout_marginEnd="16dp"
                    android:layout_marginBottom="8dp"
                    android:background="?attr/colorOnPrimary"
                    android:src="@drawable/img_receipt"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/txt_receipt"
                    app:tint="@color/white" />

                <TextView
                    android:id="@+id/textView82"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:layout_marginEnd="12dp"
                    android:text="دریافتی"
                    android:textColor="?attr/colorOnSecondary"
                    android:textSize="14sp"
                    android:textStyle="bold"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

                <TextView
                    android:id="@+id/txt_receipt"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="12dp"
                    android:layout_marginTop="8dp"
                    android:text="0 تومان"
                    android:textColor="?attr/colorPrimary"
                    android:textSize="15sp"
                    android:textStyle="bold"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/textView82" />
            </androidx.constraintlayout.widget.ConstraintLayout>

            <View
                android:id="@+id/view91"
                android:layout_width="1dp"
                android:layout_height="0dp"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="16dp"
                android:background="@color/gray"
                app:layout_constraintBottom_toBottomOf="@+id/btn_investment"
                app:layout_constraintEnd_toEndOf="@+id/btn_receipt"
                app:layout_constraintStart_toEndOf="@+id/btn_receipt"
                app:layout_constraintTop_toTopOf="@+id/btn_investment" />

            <androidx.constraintlayout.widget.ConstraintLayout
                android:id="@+id/btn_investment"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toEndOf="@+id/btn_receipt"
                app:layout_constraintTop_toTopOf="@+id/btn_receipt">

                <ImageView
                    android:id="@+id/imageButton4"
                    android:layout_width="30dp"
                    android:layout_height="30dp"
                    android:layout_gravity="start"
                    android:layout_marginEnd="16dp"
                    android:layout_marginBottom="8dp"
                    android:background="?attr/colorOnPrimary"
                    android:src="@drawable/img_investment"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/txt_investment"
                    app:tint="@color/white" />

                <TextView
                    android:id="@+id/textView8"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:layout_marginEnd="12dp"
                    android:text="سرمایه گذاری"
                    android:textColor="?attr/colorOnSecondary"
                    android:textSize="14sp"
                    android:textStyle="bold"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

                <TextView
                    android:id="@+id/txt_investment"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="12dp"
                    android:layout_marginTop="8dp"
                    android:text="0 تومان"
                    android:textColor="?attr/colorPrimary"
                    android:textSize="15sp"
                    android:textStyle="bold"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@+id/textView8" />
            </androidx.constraintlayout.widget.ConstraintLayout>


        </androidx.constraintlayout.widget.ConstraintLayout>


package com.vearad.vearatick.fgmSub

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kizitonwose.calendarview.utils.persian.PersianCalendar
import com.vearad.vearatick.DataBase.EfficiencyDao
import com.vearad.vearatick.DataBase.EfficiencyEmployee
import com.vearad.vearatick.DataBase.Employee
import kotlinx.coroutines.launch

class EmployeeStatisticsViewModel : ViewModel() {
    private val efficiencyEmployeeLiveData = MutableLiveData<EfficiencyEmployee>()

    fun updateEfficiencyData(employee: Employee, efficiencyEmployeeDao: EfficiencyDao) {
        viewModelScope.launch {
            val efficiencyEmployee = efficiencyEmployeeDao.getEfficiencyEmployee(employee.idEmployee!!)
            efficiencyEmployeeLiveData.value = efficiencyEmployee!!
            val day = PersianCalendar()

            if (day.persianWeekDayName.toString() == "\u062c\u0645\u0639\u0647") {

                val weekWatch = efficiencyEmployee.totalWeekWatch
                var monthWatch = efficiencyEmployee.totalMonthWatch
                monthWatch = weekWatch!! + monthWatch!!

                val efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence
                var efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence
                efficiencyTotalPresence = efficiencyWeekPresence!! + efficiencyTotalPresence!!

                val newEfficiencyEmployee = EfficiencyEmployee(
                    idEfficiency = efficiencyEmployee.idEfficiency,
                    idEmployee = efficiencyEmployee.idEmployee,
                    mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                    numberDay = efficiencyEmployee.numberDay,
                    totalWatch = efficiencyEmployee.totalWatch,
                    efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                    efficiencyTotalPresence = efficiencyTotalPresence,
                    totalWeekDuties = efficiencyEmployee.totalWeekDuties,
                    totalMonthDuties = efficiencyEmployee.totalMonthDuties,
                    totalDuties = efficiencyEmployee.totalDuties,
                    efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties,
                    efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties,
                    efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                    totalMonthWatch = monthWatch,
                    totalWeekWatch = 0,
                    efficiencyMonthDuties = efficiencyEmployee.totalMonthDuties,

                    )
                efficiencyEmployeeDao.update(newEfficiencyEmployee)

            } else {

                efficiencyEmployee.totalMonthWatch =
                    efficiencyEmployee.totalWeekWatch!! + efficiencyEmployee.totalMonthWatch!!
                efficiencyEmployee.efficiencyTotalPresence =
                    efficiencyEmployee.efficiencyTotalPresence!! + efficiencyEmployee.efficiencyWeekPresence!!
            }

            if (day.persianDay == 30) {
                efficiencyEmployee.totalWatch = efficiencyEmployee.totalMonthWatch
                efficiencyEmployee.totalMonthWatch = 0

                val monthWatch = efficiencyEmployee.totalMonthWatch
                var totalWatch = efficiencyEmployee.totalWatch
                totalWatch = monthWatch!! + totalWatch!!

                val newEfficiencyEmployee = EfficiencyEmployee(
                    idEfficiency = efficiencyEmployee.idEfficiency,
                    idEmployee = efficiencyEmployee.idEmployee,
                    mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                    numberDay = efficiencyEmployee.numberDay,
                    efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                    efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence,
                    totalWeekDuties = efficiencyEmployee.totalWeekDuties,
                    totalMonthDuties = efficiencyEmployee.totalMonthDuties,
                    totalDuties = efficiencyEmployee.totalDuties,
                    efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties,
                    efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties,
                    efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                    totalMonthWatch = 0,
                    totalWatch = totalWatch,
                    totalWeekWatch = efficiencyEmployee.totalWeekWatch,
                    efficiencyMonthDuties = efficiencyEmployee.totalMonthDuties
                )
                efficiencyEmployeeDao.update(newEfficiencyEmployee)
            } else {
                efficiencyEmployee.totalWatch =
                    efficiencyEmployee.totalMonthWatch!! + efficiencyEmployee.totalWatch!!

            }

            if (day.persianWeekDayName.toString() == "\u062c\u0645\u0639\u0647") {
                val weekDuties = efficiencyEmployee.totalWeekDuties
                var monthDuties = efficiencyEmployee.totalMonthDuties
                monthDuties = weekDuties!! + monthDuties!!

                val efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties
                var efficiencyMonthDuties = efficiencyEmployee.efficiencyMonthDuties
                efficiencyMonthDuties = efficiencyWeekDuties!! + efficiencyMonthDuties!!

                val newEfficiencyEmployee = EfficiencyEmployee(
                    idEfficiency = efficiencyEmployee.idEfficiency,
                    idEmployee = efficiencyEmployee.idEmployee,
                    mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                    numberDay = efficiencyEmployee.numberDay,
                    totalWatch = efficiencyEmployee.totalWatch,
                    efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                    efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence,
                    totalWeekDuties = 0,
                    totalMonthDuties = monthDuties,
                    totalDuties = efficiencyEmployee.totalDuties,
                    efficiencyWeekDuties = 0,
                    efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties,
                    efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                    totalMonthWatch = efficiencyEmployee.totalMonthWatch,
                    totalWeekWatch = efficiencyEmployee.totalWeekWatch,
                    efficiencyMonthDuties = efficiencyMonthDuties
                )
                efficiencyEmployeeDao.update(newEfficiencyEmployee)

            } else {
                efficiencyEmployee.totalMonthDuties =
                    efficiencyEmployee.totalWeekDuties!! + efficiencyEmployee.totalMonthDuties!!

                efficiencyEmployee.efficiencyMonthDuties =
                    efficiencyEmployee.efficiencyWeekDuties!! + efficiencyEmployee.efficiencyMonthDuties!!


            }

            if (day.persianDay == 30) {

                var totalDuties = efficiencyEmployee.totalDuties
                val monthDuties = efficiencyEmployee.totalMonthDuties
                totalDuties = monthDuties!! + totalDuties!!

                val efficiencyMonthDuties = efficiencyEmployee.efficiencyMonthDuties
                var efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties
                efficiencyTotalDuties = efficiencyTotalDuties!! + efficiencyMonthDuties!!

                val newEfficiencyEmployee = EfficiencyEmployee(
                    idEfficiency = efficiencyEmployee.idEfficiency,
                    idEmployee = efficiencyEmployee.idEmployee,
                    mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                    numberDay = efficiencyEmployee.numberDay,
                    totalWatch = efficiencyEmployee.totalWatch,
                    efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                    efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence,
                    totalWeekDuties = efficiencyEmployee.totalWeekDuties,
                    totalMonthDuties = 0,
                    totalDuties = totalDuties,
                    efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties,
                    efficiencyTotalDuties = efficiencyTotalDuties,
                    efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                    totalMonthWatch = efficiencyEmployee.totalMonthWatch,
                    totalWeekWatch = efficiencyEmployee.totalWeekWatch,
                    efficiencyMonthDuties = 0

                )
                efficiencyEmployeeDao.update(newEfficiencyEmployee)
            } else {
                efficiencyEmployee.totalDuties =
                    efficiencyEmployee.totalMonthDuties!! + efficiencyEmployee.totalDuties!!
                efficiencyEmployee.efficiencyTotalDuties =
                    efficiencyEmployee.efficiencyTotalDuties!! + efficiencyEmployee.efficiencyMonthDuties!!
            }
        }
    }

    fun getEfficiencyEmployeeLiveData(): LiveData<EfficiencyEmployee> {
        return efficiencyEmployeeLiveData
    }
}















    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        efficiencyEmployee = efficiencyEmployeeDao.getEfficiencyEmployee(employee.idEmployee!!)!!
        val day = PersianCalendar()

        if (day.persianWeekDayName.toString() == "\u062c\u0645\u0639\u0647") {

            val weekWatch = efficiencyEmployee.totalWeekWatch
            var monthWatch = efficiencyEmployee.totalMonthWatch
            monthWatch = weekWatch!! + monthWatch!!

            val efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence
            var efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence
            efficiencyTotalPresence = efficiencyWeekPresence!! + efficiencyTotalPresence!!

            val newEfficiencyEmployee = EfficiencyEmployee(
                idEfficiency = efficiencyEmployee.idEfficiency,
                idEmployee = efficiencyEmployee.idEmployee,
                mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                numberDay = efficiencyEmployee.numberDay,
                totalWatch = efficiencyEmployee.totalWatch,
                efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                efficiencyTotalPresence = efficiencyTotalPresence,
                totalWeekDuties = efficiencyEmployee.totalWeekDuties,
                totalMonthDuties = efficiencyEmployee.totalMonthDuties,
                totalDuties = efficiencyEmployee.totalDuties,
                efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties,
                efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties,
                efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                totalMonthWatch = monthWatch,
                totalWeekWatch = 0,
                efficiencyMonthDuties = efficiencyEmployee.totalMonthDuties,

                )
            efficiencyEmployeeDao.update(newEfficiencyEmployee)

        } else {

            efficiencyEmployee.totalMonthWatch =
                efficiencyEmployee.totalWeekWatch!! + efficiencyEmployee.totalMonthWatch!!
            efficiencyEmployee.efficiencyTotalPresence =
                efficiencyEmployee.efficiencyTotalPresence!! + efficiencyEmployee.efficiencyWeekPresence!!
        }

        if (day.persianDay == 30) {
            efficiencyEmployee.totalWatch = efficiencyEmployee.totalMonthWatch
            efficiencyEmployee.totalMonthWatch = 0

            val monthWatch = efficiencyEmployee.totalMonthWatch
            var totalWatch = efficiencyEmployee.totalWatch
            totalWatch = monthWatch!! + totalWatch!!

            val newEfficiencyEmployee = EfficiencyEmployee(
                idEfficiency = efficiencyEmployee.idEfficiency,
                idEmployee = efficiencyEmployee.idEmployee,
                mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                numberDay = efficiencyEmployee.numberDay,
                efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence,
                totalWeekDuties = efficiencyEmployee.totalWeekDuties,
                totalMonthDuties = efficiencyEmployee.totalMonthDuties,
                totalDuties = efficiencyEmployee.totalDuties,
                efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties,
                efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties,
                efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                totalMonthWatch = 0,
                totalWatch = totalWatch,
                totalWeekWatch = efficiencyEmployee.totalWeekWatch,
                efficiencyMonthDuties = efficiencyEmployee.totalMonthDuties
            )
            efficiencyEmployeeDao.update(newEfficiencyEmployee)
        } else {
            efficiencyEmployee.totalWatch =
                efficiencyEmployee.totalMonthWatch!! + efficiencyEmployee.totalWatch!!

        }

        binding.txtWatchWeek.text = efficiencyEmployee.totalWeekWatch.toString() + " ساعت"
        binding.txtWatchMonth.text = efficiencyEmployee.totalMonthWatch.toString() + " ساعت"
        binding.txtWatchTotal.text = efficiencyEmployee.totalWatch.toString() + " ساعت"

        binding.progressTotalPresence.setPercent(efficiencyEmployee.efficiencyTotalPresence!!.toInt())
        binding.txtTotalPresence.text =
            efficiencyEmployee.efficiencyTotalPresence!!.toString() + " %"

        if (day.persianWeekDayName.toString() == "\u062c\u0645\u0639\u0647") {
            val weekDuties = efficiencyEmployee.totalWeekDuties
            var monthDuties = efficiencyEmployee.totalMonthDuties
            monthDuties = weekDuties!! + monthDuties!!

            val efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties
            var efficiencyMonthDuties = efficiencyEmployee.efficiencyMonthDuties
            efficiencyMonthDuties = efficiencyWeekDuties!! + efficiencyMonthDuties!!

            val newEfficiencyEmployee = EfficiencyEmployee(
                idEfficiency = efficiencyEmployee.idEfficiency,
                idEmployee = efficiencyEmployee.idEmployee,
                mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                numberDay = efficiencyEmployee.numberDay,
                totalWatch = efficiencyEmployee.totalWatch,
                efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence,
                totalWeekDuties = 0,
                totalMonthDuties = monthDuties,
                totalDuties = efficiencyEmployee.totalDuties,
                efficiencyWeekDuties = 0,
                efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties,
                efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                totalMonthWatch = efficiencyEmployee.totalMonthWatch,
                totalWeekWatch = efficiencyEmployee.totalWeekWatch,
                efficiencyMonthDuties = efficiencyMonthDuties
            )
            efficiencyEmployeeDao.update(newEfficiencyEmployee)

        } else {
            efficiencyEmployee.totalMonthDuties =
                efficiencyEmployee.totalWeekDuties!! + efficiencyEmployee.totalMonthDuties!!

            efficiencyEmployee.efficiencyMonthDuties =
                efficiencyEmployee.efficiencyWeekDuties!! + efficiencyEmployee.efficiencyMonthDuties!!


        }

        if (day.persianDay == 30) {

            var totalDuties = efficiencyEmployee.totalDuties
            val monthDuties = efficiencyEmployee.totalMonthDuties
            totalDuties = monthDuties!! + totalDuties!!

            val efficiencyMonthDuties = efficiencyEmployee.efficiencyMonthDuties
            var efficiencyTotalDuties = efficiencyEmployee.efficiencyTotalDuties
            efficiencyTotalDuties = efficiencyTotalDuties!! + efficiencyMonthDuties!!

            val newEfficiencyEmployee = EfficiencyEmployee(
                idEfficiency = efficiencyEmployee.idEfficiency,
                idEmployee = efficiencyEmployee.idEmployee,
                mustWeekWatch = efficiencyEmployee.mustWeekWatch,
                numberDay = efficiencyEmployee.numberDay,
                totalWatch = efficiencyEmployee.totalWatch,
                efficiencyWeekPresence = efficiencyEmployee.efficiencyWeekPresence,
                efficiencyTotalPresence = efficiencyEmployee.efficiencyTotalPresence,
                totalWeekDuties = efficiencyEmployee.totalWeekDuties,
                totalMonthDuties = 0,
                totalDuties = totalDuties,
                efficiencyWeekDuties = efficiencyEmployee.efficiencyWeekDuties,
                efficiencyTotalDuties = efficiencyTotalDuties,
                efficiencyTotal = efficiencyEmployee.efficiencyTotal,
                totalMonthWatch = efficiencyEmployee.totalMonthWatch,
                totalWeekWatch = efficiencyEmployee.totalWeekWatch,
                efficiencyMonthDuties = 0

            )
            efficiencyEmployeeDao.update(newEfficiencyEmployee)
        } else {
            efficiencyEmployee.totalDuties =
                efficiencyEmployee.totalMonthDuties!! + efficiencyEmployee.totalDuties!!
            efficiencyEmployee.efficiencyTotalDuties =
                efficiencyEmployee.efficiencyTotalDuties!! + efficiencyEmployee.efficiencyMonthDuties!!
        }

        binding.txtTackWeek.text = efficiencyEmployee.totalWeekDuties.toString() + " تا"
        binding.txtTackMonth.text = efficiencyEmployee.totalMonthDuties.toString() + " تا"
        binding.txtTackTotal.text = efficiencyEmployee.totalDuties.toString() + " تا"

        binding.progressWeekDuties.setPercent(efficiencyEmployee.efficiencyWeekDuties!!.toInt())
        binding.txtWeekDuties.text = efficiencyEmployee.efficiencyWeekDuties!!.toString() + " %"
        binding.progressMonthDuties.setPercent(efficiencyEmployee.efficiencyMonthDuties!!.toInt())
        binding.txtMonthDuties.text =
            efficiencyEmployee.efficiencyMonthDuties!!.toString() + " %"
        binding.progressTotalDuties.setPercent(efficiencyEmployee.efficiencyTotalDuties!!.toInt())
        binding.txtTotalDuties.text =
            efficiencyEmployee.efficiencyTotalDuties!!.toString() + " %"
    }
